1. 红黑树的性质 （自平衡的二叉查找树）   
    1. 每个结点不是红色就是黑色
    2. 不可能有连在一起的红色节点
    3. 根结点是黑色
    4. 每个红色节点的两个自节点都是黑色，叶子节点都是黑色。

2. 红黑树变换规则：
    1. 变色：红变黑，黑变红
    2. 左旋：逆时针旋转，设 根结点R的右节点为A， 旋转操作为，将A置为根结点，R为A的左节点。原来A的左节点挂到R的右节点上。
    3. 右旋：顺时针旋转，设 根结点R的左节点为A， 旋转操作为，将A作为根结点，R为A的右节点，原来A的右节点挂到R的左节点上。

3. 旋转和颜色变换的规则：所有插入的点默认都为红色
    1. 变颜色的情况：当前节点的父亲是红色，且它的祖父节点的另一个子节点也是红色（叔叔节点）
        1. 把父节点设为黑色
        2. 把叔叔也设为黑色
        3. 把祖父节点设为红色
        4. 把指针定义到祖父节点设为当前要操作的（爷爷）分析的点变换的规则
    2. 左旋：当前父节点是红色，叔叔是黑色的时候，且当前的节点是右子树。左旋
        以父节点作为左旋。
    3. 右旋：当前父节点是红色，叔叔是黑色的时候，且当前的节点是左子树。右旋
        1. 把父节点变为黑色
        2. 把祖父节点变为红色
        3. 以祖父节点旋转

RBTree：内存查找高效树，适合小数据量的查找，不适合大数据量，不适合磁盘存储，具体分析就是IO浪费和读取资源浪费。还有就是树的深度会很大。适合底层系统做内存运算
